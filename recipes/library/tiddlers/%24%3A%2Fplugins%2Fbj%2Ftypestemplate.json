{"title":"$:/plugins/bj/typestemplate","description":"enables user templates for each type","author":"JeffreyWilkinson","version":"1.17.1","list":"readme license","core-version":">=5.1.13","source":"https://github.com/buggyj/TW5-tools","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"/home/runner/work/tw-personal-plugin-library/tw-personal-plugin-library/plugins/bj/typestemplate/README.md\":{\"title\":\"/home/runner/work/tw-personal-plugin-library/tw-personal-plugin-library/plugins/bj/typestemplate/README.md\",\"text\":\"TW5-typestemplate\\n==============\\n\",\"type\":\"text/x-markdown\"},\"$:/plugins/bj/typestemplate/callEditPicker\":{\"title\":\"$:/plugins/bj/typestemplate/callEditPicker\",\"text\":\"<$editTemplatePicker key=\\\"applicationtype\\\"/>\\n\"},\"$:/plugins/bj/typestemplate/callViewPicker\":{\"title\":\"$:/plugins/bj/typestemplate/callViewPicker\",\"text\":\"<$viewTemplatePicker key=\\\"applicationtype\\\"/>\\n\\n\"},\"$:/plugins/bj/typestemplate/editTemplatePicker.js\":{\"title\":\"$:/plugins/bj/typestemplate/editTemplatePicker.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/bj/typestemplate/editTemplatePicker.js\\ntype: application/javascript\\nmodule-type: macro\\n\\n\\n\\\\*/\\n\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n\\n*/\\n\\nexports.name = \\\"editTemplatePicker\\\";\\n\\nexports.params = [\\n\\n];\\n/*\\nRun the macro\\n*/\\n// Mappings from content type to edit templates type are stored in tiddlers with this prefix\\nvar EDIT_TEMPLATE_MAPPING_PREFIX = \\\"$:/config/EditTemplateTypeMappings/\\\";\\n\\nexports.run = function() {\\n\\t\\nvar cur = this.getVariable(\\\"currentTiddler\\\"), template, \\n\\ttiddler = this.wiki.getTiddler(cur);\\n\\ttiddler && tiddler.fields && tiddler.fields.applicationtype?\\n\\t\\ttemplate =  $tw.wiki.getTiddlerText(EDIT_TEMPLATE_MAPPING_PREFIX +tiddler.fields.applicationtype) :\\n\\t\\ttiddler && tiddler.fields && tiddler.fields.type? \\n\\t\\t\\t\\ttemplate =  $tw.wiki.getTiddlerText(EDIT_TEMPLATE_MAPPING_PREFIX +tiddler.fields.type) : template = null;\\n\\tif (!template)\\n\\t\\treturn  $tw.wiki.getTiddlerText(\\\"$:/core/ui/EditTemplate\\\");\\t\\n\\ttemplate = template.trim();\\nreturn  $tw.wiki.getTiddlerText(template)||$tw.wiki.getTiddlerText(\\\"$:/core/ui/EditTemplate\\\");\\n}\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/plugins/bj/typestemplate/editTmpPicker.js\":{\"title\":\"$:/plugins/bj/typestemplate/editTmpPicker.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/bj/typestemplate/editTmpPicker.js\\ntype: application/javascript\\nmodule-type: widget\\n\\n\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Mappings from content type to edit templates type are stored in tiddlers with this prefix\\nvar VIEW_TEMPLATE_MAPPING_PREFIX = \\\"$:/config/EditTemplateTypeMappings/\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar viewTmpPicker = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nviewTmpPicker.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nviewTmpPicker.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n\\nviewTmpPicker.prototype.makeTemplate = function(title) {\\n\\tvar templateTree = [{type: \\\"transclude\\\", attributes: {tiddler: {type: \\\"string\\\", value: title}}}];\\n\\treturn {type: \\\"listitem\\\", itemTitle: title, variableName: this.variableName, children: templateTree};\\n}\\n\\nviewTmpPicker.prototype.getTemplate = function() {\\n\\tvar template = null, tiddler;\\n\\tthis.cur = this.getVariable(\\\"currentTiddler\\\"),\\n\\ttiddler = this.wiki.getTiddler(this.cur);\\n\\tthis.tmplvar = null;\\n\\tthis.key = (this.getAttribute(\\\"key\\\")||\\\"type\\\").trim();\\n\\tthis.tmplvar = tiddler && tiddler.fields && tiddler.fields[this.key]?\\n\\t\\tVIEW_TEMPLATE_MAPPING_PREFIX +tiddler.fields[this.key] : null;\\n\\tif (!this.tmplvar) {\\n\\t\\tthis.tmplvar = \\\"\\\";\\n\\t\\treturn  \\\"$:/core/ui/EditTemplate\\\";\\n\\t}\\n\\ttemplate = $tw.wiki.getTiddlerText(this.tmplvar.trim());\\n\\tif (template) { return template.trim();}\\nreturn  \\\"$:/core/ui/EditTemplate\\\";\\n}\\n/*\\nCompute the internal state of the widget\\n*/\\nviewTmpPicker.prototype.execute = function() {\\n\\tvar members = [],\\n\\t\\tself = this;\\n\\tthis.template = self.getTemplate();\\n\\tmembers.push(self.makeTemplate(this.template));\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets(members);\\n};\\n\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nviewTmpPicker.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif($tw.utils.count(changedAttributes) > 0) {\\n\\t\\t// Rerender ourselves\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else if ((changedTiddlers[this.cur]||changedTiddlers[this.tmplvar])&&this.template != this.getTemplate()){\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\t\\n\\telse {\\n\\t\\t//check to see if we need to change template\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n//refresh when template edited handled by child transclusion\\nreturn this.refreshChildren(changedTiddlers);\\n};\\n\\t\\n\\n\\nexports[\\\"editTemplatePicker\\\"] = viewTmpPicker;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/plugins/bj/typestemplate/license\":{\"title\":\"$:/plugins/bj/typestemplate/license\",\"text\":\"The MIT License (MIT)\\n\\nCopyright (c) 2015 Jeffrey Wikinson aka buggyj\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\nthis software and associated documentation files (the \\\"Software\\\"), to deal in\\nthe Software without restriction, including without limitation the rights to\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\\nthe Software, and to permit persons to whom the Software is furnished to do so,\\nsubject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\"},\"$:/plugins/bj/typestemplate/readme\":{\"title\":\"$:/plugins/bj/typestemplate/readme\",\"text\":\"This plugin enables the use of custom designed view and edit templates. A field can be chosen by the user whose contents with be used to pick a template. Configuration tiddlers, based on the content of the chosen field, are used to locate the templates. \\n\\nThe default field is 'type', this enables the user to setup edit and view templates for each type - defaults to non-plugin behavior.\\n\\nExample: if a tiddler is given the type 'test' then the templates for test can be specified by these config tiddlers: \\n\\n[[$:/config/EditTemplateTypeMappings/test]]\\n\\nand\\n\\n[[$:/config/ViewTemplateTypeMappings/test]]\\n\\nie the pattern is \\n\\n```\\n$:/config/EditTemplateTypeMappings/ + value of type field\\n$:/config/ViewTemplateTypeMappings/ + value of type field\\n```\\n\\nThe field used as the key for the template choosings can be put the name of the field to base types upon in the tiddlers\\n\\n$:/bj/config/typestemplate/callViewPicker\\n\\n\\n$:/bj/config/typestemplate/callEditPicker\\n\\n\"},\"$:/core/ui/PageTemplate/story\":{\"title\":\"$:/core/ui/PageTemplate/story\",\"tags\":\"$:/tags/PageTemplate\",\"text\":\"<section class=\\\"tc-story-river\\\">\\n\\n<section class=\\\"story-backdrop\\\">\\n\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/AboveStory]!has[draft.of]]\\\">\\n\\n<$transclude/>\\n\\n</$list>\\n\\n</section>\\n\\n<$list filter=\\\"[list[$:/StoryList]]\\\" history=\\\"$:/HistoryList\\\" template=\\\"$:/plugins/bj/typestemplate/callViewPicker\\\" editTemplate=\\\"$:/plugins/bj/typestemplate/callEditPicker\\\" storyview={{$:/view}} />\\n\\n<section class=\\\"story-frontdrop\\\">\\n\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/BelowStory]!has[draft.of]]\\\">\\n\\n<$transclude/>\\n\\n</$list>\\n\\n</section>\\n\\n</section>\\n\"},\"$:/plugins/bj/typestemplate/viewTemplatePicker.js\":{\"title\":\"$:/plugins/bj/typestemplate/viewTemplatePicker.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/bj/typestemplate/viewTemplatePicker.js\\ntype: application/javascript\\nmodule-type: macro\\n\\n\\n\\\\*/\\n\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n\\n*/\\n\\nexports.name = \\\"viewTemplatePicker\\\";\\n\\nexports.params = [\\n\\n];\\n/*\\nRun the macro\\n*/\\n// Mappings from content type to edit templates type are stored in tiddlers with this prefix\\nvar VIEW_TEMPLATE_MAPPING_PREFIX = \\\"$:/config/ViewTemplateTypeMappings/\\\";\\n\\nexports.run = function() {\\n\\t\\nvar cur = this.getVariable(\\\"currentTiddler\\\"), template = null, \\n\\ttiddler = this.wiki.getTiddler(cur);\\n\\ttiddler && tiddler.fields && tiddler.fields.applicationtype?\\n\\t\\ttemplate =  VIEW_TEMPLATE_MAPPING_PREFIX +tiddler.fields.applicationtype :\\n\\t\\ttiddler && tiddler.fields && tiddler.fields.type? \\n\\t\\t\\t\\ttemplate =  VIEW_TEMPLATE_MAPPING_PREFIX +tiddler.fields.type : template = null;\\n\\tif (!template)\\n\\t\\treturn  '<$transclude tiddler=\\\"$:/core/ui/ViewTemplate\\\")/>';\\n\\ttemplate = $tw.wiki.getTiddlerText(template.trim());\\n\\tif (template) { return '<$transclude tiddler=\\\"'+template.trim()+'\\\")/>';}\\nreturn  '<$transclude tiddler=\\\"$:/core/ui/ViewTemplate\\\")/>';\\n}\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"macro\"},\"$:/plugins/bj/typestemplate/viewTmpPicker.js\":{\"title\":\"$:/plugins/bj/typestemplate/viewTmpPicker.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/bj/typestemplate/viewTmpPicker.js\\ntype: application/javascript\\nmodule-type: widget\\n\\n\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Mappings from content type to edit templates type are stored in tiddlers with this prefix\\nvar VIEW_TEMPLATE_MAPPING_PREFIX = \\\"$:/config/ViewTemplateTypeMappings/\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar viewTmpPicker = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nviewTmpPicker.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nviewTmpPicker.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n\\nviewTmpPicker.prototype.makeTemplate = function(title) {\\n\\tvar templateTree = [{type: \\\"transclude\\\", attributes: {tiddler: {type: \\\"string\\\", value: title}}}];\\n\\treturn {type: \\\"listitem\\\", itemTitle: title, variableName: this.variableName, children: templateTree};\\n}\\n\\nviewTmpPicker.prototype.getTemplate = function() {\\n\\tvar template = null, tiddler;\\n\\tthis.cur = this.getVariable(\\\"currentTiddler\\\"),\\n\\ttiddler = this.wiki.getTiddler(this.cur);\\n\\tthis.tmplvar = null;\\n\\tthis.key = (this.getAttribute(\\\"key\\\")||\\\"type\\\").trim();\\n\\tthis.tmplvar = tiddler && tiddler.fields && tiddler.fields[this.key]?\\n\\t\\tVIEW_TEMPLATE_MAPPING_PREFIX +tiddler.fields[this.key] : null;\\n\\tif (!this.tmplvar) {\\n\\t\\tthis.tmplvar = \\\"\\\";\\n\\t\\treturn  \\\"$:/core/ui/ViewTemplate\\\";\\n\\t}\\n\\ttemplate = $tw.wiki.getTiddlerText(this.tmplvar.trim());\\n\\tif (template) { return template.trim();}\\nreturn  \\\"$:/core/ui/ViewTemplate\\\";\\n}\\n/*\\nCompute the internal state of the widget\\n*/\\nviewTmpPicker.prototype.execute = function() {\\n\\tvar members = [],\\n\\t\\tself = this;\\n\\tthis.template = self.getTemplate();\\n\\tmembers.push(self.makeTemplate(this.template));\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets(members);\\n};\\n\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nviewTmpPicker.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif($tw.utils.count(changedAttributes) > 0) {\\n\\t\\t// Rerender ourselves\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else if (changedTiddlers[this.cur]||changedTiddlers[this.tmplvar]){\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\t\\n\\telse {\\n\\t\\t//check to see if we need to change template\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\n\\t}\\n//refresh when template edited handled by child transclusion\\nreturn this.refreshChildren(changedTiddlers);\\n};\\n\\t\\n\\n\\nexports[\\\"viewTemplatePicker\\\"] = viewTmpPicker;\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"}}}"}