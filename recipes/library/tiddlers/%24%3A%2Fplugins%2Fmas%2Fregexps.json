{"title":"$:/plugins/mas/regexps","name":"Regular Expression String Extraction","description":"Extract strings and string group with regular expressions","author":"MAS","version":"0.0.0","core-version":">=5.1.18","source":"","list":"readme","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\"tiddlers\":{\"$:/plugins/mas/regexps/readme\":{\"title\":\"$:/plugins/mas/regexps/readme\",\"created\":\"20220919033842776\",\"modified\":\"20220919035234295\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\n\\\"Regular expressions\\\" are concise strings of characters that denote patterns of text to search for. The format used in ~TiddlyWiki is fully defined in [[this Mozilla reference|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions]].\\n\\nThis filter takes a title list as input, and then applies the specified regular expression. This means each title can return more than one output \\\"title\\\". This can be useful for splitting a date, for instance, into its component parts. Or finding all the words in a title that starts with a capital case.\\n\\nThe [[filter syntax|https://tiddlywiki.com/#Filter%20Run]] makes it impossible to directly specify a regular expression that contains square brackets. But regular expressions frequently require square brackets. The solution is to store the expression in a variable. \\n\\nThe regular expression parameter  can optionally start with one or more flag characters: \\\"i\\\", \\\"m\\\", or \\\"g\\\" enclosed in parentheses and preceded by a question mark (e.g. `(?gi)` ) \\n\\nThe `i` flag is is used to ignore differences between capital and lowercase letters. The `m` flag is not generally useful.\\n\\nThe `g` flag is used to determine if all matches of the regular expression will be returned. If sub-groups are used (indicated by paired `(` and `)` symbols) they will be ignored if the `g` flag is used. If the `g` flag is not used, then all matching sub-groups will be returned. If the `g` flag is not used and sub-groups are not used, then just the first match will be returned.\\n\\n\\n\"},\"$:/plugins/mas/regexps.js\":{\"title\":\"$:/plugins/mas/regexps.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/mas/regexps.js\\ntype: application/javascript\\nmodule-type: filteroperator\\n\\nFilter operator for regexp matching and returning result. All results are returned if global flag used. All sub-groups are returned if not global and sub-group hits are found.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.regexps = function(source,operator,options) {\\n\\tvar results = [],\\n\\t\\tfieldname = (operator.suffix || \\\"title\\\").toLowerCase(),\\n\\t\\tregexpString, regexp, flags = \\\"\\\", match, global,\\n\\t\\tgetFieldString = function(tiddler,title) {\\n\\t\\t\\tif(tiddler) {\\n\\t\\t\\t\\treturn tiddler.getFieldString(fieldname);\\n\\t\\t\\t} else if(fieldname === \\\"title\\\") {\\n\\t\\t\\t\\treturn title;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t};\\n\\t// Process flags and construct regexp\\n\\tregexpString = operator.operand;\\n\\tmatch = /^\\\\(\\\\?([gim]+)\\\\)/.exec(regexpString);\\n\\tif(match) {\\n\\t\\tflags = match[1];\\n\\t\\tregexpString = regexpString.substr(match[0].length);\\n\\t} else {\\n\\t\\tmatch = /\\\\(\\\\?([gim]+)\\\\)$/.exec(regexpString);\\n\\t\\tif(match) {\\n\\t\\t\\tflags = match[1];\\n\\t\\t\\tregexpString = regexpString.substr(0,regexpString.length - match[0].length);\\n\\t\\t}\\n\\t}\\n\\ttry {\\n\\t\\tregexp = new RegExp(regexpString,flags);\\n\\t} catch(e) {\\n\\t\\treturn [\\\"\\\" + e];\\n\\t}\\n\\n\\tglobal = /g/.test(flags) ;\\n\\n\\t// Process the incoming tiddlers\\n\\tif(operator.prefix === \\\"!\\\") {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tvar text = getFieldString(tiddler,title);\\n\\t\\t\\tif(text !== null) {\\n\\t\\t\\t\\tif(!regexp.exec(text)) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} else {\\n\\t\\tsource(function(tiddler,title) {\\n\\t\\t\\tvar text = getFieldString(tiddler,title), ret=\\\"\\\";\\n\\t\\t\\tif(text !== null) {\\n\\t\\t\\t\\tret = text.match(regexp) ;\\n\\t\\t\\t\\tif(ret !==null) {\\n\\t\\t\\t\\t\\tif(global) {\\n\\t\\t\\t\\t\\t\\tresults.push.apply(results,ret)  ; //DEBUG\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t// if there are  sub groups return sub groups START\\n\\t\\t\\t\\t\\t\\tif(ret.length > 1)  {     // return sub groups\\n\\t\\t\\t\\t\\t\\t\\tresults = results.concat(ret.slice(1)) ;\\n\\t\\t\\t\\t\\t\\t} else { // if no sub-groups\\n\\t\\t\\t\\t\\t\\t\\tresults.push(ret[0]);\\n\\t\\t\\t\\t\\t\\t} \\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"filteroperator\"}}}"}